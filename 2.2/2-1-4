#lang racket

(define (make-interval a b) (cons a b))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (make-center-percent c p)
  (let ((amount (* (/ (abs c) 100.0) p)))
    (make-interval (- c amount) (+ c amount))))

(define (percent i)
  (abs (/ (* 100.0 (width i)) (center i))))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2.0))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2.0))

(define (lower-bound x)
  (car x))

(define (upper-bound x)
  (cdr x))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound y) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))

(define (mul-interval-old x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval x y)
  (let ((l1 (lower-bound x))
        (u1 (upper-bound x))
        (l2 (lower-bound y))
        (u2 (upper-bound y)))
    (cond ((> l1 0)
           (cond ((> l2 0) (make-interval (* l1 l2) (* u1 u2)))    ; (2 5) (4 5)
                 ((> u2 0) (make-interval (* u1 l2) (* u1 u2)))    ; (2 5) (-1 4)
                 (else (make-interval (* u1 l2) (* l1 u2)))))      ; (2 5) (-5 -4)
          ((> u1 0)
           (cond ((> l2 0) (make-interval (* l1 u2) (* u1 u2)))    ; (-4 5) (2 5)
                 ((> u2 0) (make-interval (min (* l1 u2) (* u1 l2)) (max (* l1 l2) (* u1 u2))))   ; (-4 5) (-5 5)
                 (else (make-interval (* u1 l2) (* l1 l2)))))      ; (-4 5) (-5 -2)
          (else
           (cond ((> l2 0) (make-interval (* l1 u2) (* u1 l2)))  ; (-5 -1) (1 5)
                 ((> u2 0) (make-interval (* l1 u2) (* l1 l2)))  ; (-5 -1) (-4 5)
                 (else (make-interval (* u1 u2) (* l1 l2))))))))

(define (div-interval x y)
  (let ((up (upper-bound y))
        (low (lower-bound y)))
  (if (> (* up low) 0)
      (mul-interval x (make-interval (/ 1.0 up) (/ 1.0 low)))
      (error "Interval spans zero"))))

(define (radius x)
  (/ (- (upper-bound x)
        (lower-bound x))
     2.0))

(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))

(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

; tests

(define one (make-interval 3 5))
(define two (make-interval 1 5))

(radius one)
(radius two)
(add-interval one two)
(radius (add-interval one two))
(newline)

(sub-interval two one)
(radius (sub-interval two one))
(newline)

(mul-interval one two)
(radius (mul-interval one two))
(newline)

(div-interval one two)
(radius (div-interval one two))
(newline)

(define test (make-interval 1 2))
(define test2 (make-interval 40 200))
(div-interval test test2)

(define center1 (make-center-percent 1200 1))
(define center2 (make-center-percent 2500 1))
(percent (mul-interval center1 center2))

(newline)
(display "2.14")
(newline)
(define test3 (make-center-percent 10 10))
(define test4 (make-center-percent 20 5))

test3
test4
(par1 test3 test4)
(par2 test3 test4)

(div-interval test3 test3)
(div-interval test3 test4)