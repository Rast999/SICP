#lang racket


; Ex 2.25
(define one (list 1 3 (list 5 7) 9))

(car (cdr (car (cdr (cdr one)))))

(define two (list (list 7)))

(car (car two))

(define three (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))

(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr three))))))))))))

(cadr (cadr (cadr (cadr (cadr (cadr three))))))

; Ex 2.25

(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y)
(cdr (cdr (cons x y)))
(cdr (list x y))

; Ex 2.26

(define (reverse l)
  (define (iter items result)
    (if (null? items)
        result
        (iter (cdr items) (cons (car items) result))))
  (iter l '()))

(define (deep-reverse l)
  (define (iter items result)
    (if (null? items)
        result
        (iter (cdr items)
              (cons (if (pair? (car items))
                        (iter (car items) '())
                        (car items))
                    result))))
  (iter l '()))

(define z (list 1 2 3 4 5))
(define t (list (list 1 2) (list 3 4)))
(reverse z)
(reverse t)
(deep-reverse z)
(deep-reverse t)

; Ex 2.28

(define (fringe tree)
  (let ((left (car tree))
        (right (cdr tree)))
    (cond ())))