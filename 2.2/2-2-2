#lang racket


; Ex 2.25
(define one (list 1 3 (list 5 7) 9))

(car (cdr (car (cdr (cdr one)))))

(define two (list (list 7)))

(car (car two))

(define three (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))

(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr three))))))))))))

(cadr (cadr (cadr (cadr (cadr (cadr three))))))

; Ex 2.25

(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y)
(cdr (cdr (cons x y)))
(cdr (list x y))

; Ex 2.26

(define (reverse l)
  (define (iter items result)
    (if (null? items)
        result
        (iter (cdr items) (cons (car items) result))))
  (iter l '()))

(define (deep-reverse l)
  (define (iter items result)
    (if (null? items)
        result
        (iter (cdr items)
              (cons (if (pair? (car items))
                        (iter (car items) '())
                        (car items))
                    result))))
  (iter l '()))

(define z (list 1 2 3 4 5))
(define t (list (list 1 2) (list 3 4)))
(reverse z)
(reverse t)
(deep-reverse z)
(deep-reverse t)

; Ex 2.28

(define (fringe tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (cons tree '()))
        (else (append (fringe (car tree)) (fringe (cdr tree))))))

; Ex 2.29

(define (make-mobile left right)
  (cons left right))

(define (make-branch length structure)
  (cons length structure))

(define (left-branch x)
  (car x))

(define (right-branch x)
  (cdr x))

(define (branch-length x)
  (car x))

(define (branch-structure x)
  (cdr x))

(define (total-weight m)
  (cond ((null? m) 0)
        ((not (pair? m)) m)
        (else (+ (total-weight (branch-structure (left-branch m)))
                 (total-weight (branch-structure (right-branch m)))))))

(define (torque b)
  (* (branch-length b) (total-weight (branch-structure b))))

(define (balanced? mobile)
  (if (not (pair? mobile))
      #t
      (and (= (torque (left-branch mobile)) (torque (right-branch mobile)))
           (balanced? (branch-structure (left-branch mobile)))
           (balanced? (branch-structure (right-branch mobile))))))


; Ex 2.30

(define (square-tree-2 tree)
  (cond ((null? tree) '())
        ((not (pair? tree)) (* tree tree))
        (else
         (cons (square-tree-2 (car tree))
               (square-tree-2 (cdr tree))))))

(define (square-tree tree)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree sub-tree)
             (* sub-tree sub-tree)))
  tree))


(define (tree-map proc items)
  (cond ((null? items) '())
        ((not (pair? items)) (proc items))
        (else (cons (tree-map proc (car items))
                    (tree-map proc (cdr items))))))

(define (square-tree-3 tree)
  (tree-map (lambda (x) (* x x)) tree))

; TESTS

(define mob (make-mobile
             (make-branch 10 10)
             (make-branch 10 (make-mobile (make-branch 5 5) (make-branch 5 5)))))

(define lft (left-branch mob))
(define rgt (right-branch mob))
lft
rgt
(branch-length lft)
(branch-length rgt)
(branch-structure lft)
(branch-structure rgt)
(total-weight mob)

(balanced? mob)

(square-tree (list 1
                   (list 2 (list 3 4) 5)
                   (list 6 7)))

(square-tree-2 (list 1
                   (list 2 (list 3 4) 5)
                   (list 6 7)))

(square-tree-3 (list 1
                   (list 2 (list 3 4) 5)
                   (list 6 7)))

(define (subsets s)
  (if (null? s)
      (list '())
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (x) (append (list (car s)) x)) rest)))))

(subsets (list 1 2 3))