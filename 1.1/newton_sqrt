#lang racket

(define (square x) (* x x))

(define (average x y) (/ (+ x y) 2))

(define (sqrt-iter guess x last-guess)
  (if (good-enough? guess last-guess)
      guess
      (sqrt-iter (improve guess x)
                 x
                 guess)))

(define (cubic-iter guess x last-guess)
  (if (good-enough? guess last-guess)
      guess
      (cubic-iter (improve-cubic guess x)
                  x
                  guess)))

(define (good-enough? guess last-guess)
  (< (abs (- guess last-guess)) (/ guess 100)))

(define (improve y x)
  (average y (/ x y)))

(define (improve-cubic guess x)
  (/
   (+ (/ x (square guess))
      (* 2 guess))
   3))

(define (sqrt x)
  (sqrt-iter 1.0 x x))

(define (cubic-root x)
  (cubic-iter 1.0 x x))

; TESTS

(sqrt 4)
(sqrt 9)
(sqrt 2)
(sqrt 1000000)
(sqrt 0.0009)

(cubic-root 8)
(cubic-root 27)
(cubic-root 15)